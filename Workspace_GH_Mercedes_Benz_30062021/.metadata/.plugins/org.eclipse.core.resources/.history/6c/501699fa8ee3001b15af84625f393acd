package Utilities;

import java.io.IOException;
import java.util.Date;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;

public class ExtentManager {
	
	//METHOD's Job - getInstanceHtmlReporter()
	//This class file will see if objects of ExtentHTMLReporter is created or not.
	//If the object of ExtentHTMLReporter is not created , create it
	/*The same object of ExtentHTMLReporter class needs to be used in all class files 
	defined in com.hybrid.testcase package.*/
	
	
	//Method's job - getInstanceReporter()
	//This class file will see if objects of ExtentReports is created or not.
	//If the object of ExtentReports is not created , create it
	/*The same object of the ExtentReports class needs to be used in all class files 
	 * defined in com.hybrid.testcases package .*/
	
	/*ExtentHTMLReporter - A class inside the Extent reports API responsible for 
	defining the path and name of the report. Report will have an extension'of
	html. This class can also also be used to set the theme of the report, placeholder
	for pie chart, define the title of the report, to define the name of the report*/
	/*ExtentReports - A class inside the Extent reports API responsible for creating the test case,
	creating logs, creating test category, defining system information for the report
	generated and for writing the report in the report generated*/
	
	//Global Variables
	private static ExtentSparkReporter  report;
	private static ExtentSparkReporter sparkFail;
	private static ExtentSparkReporter  sparkAll; 
	private static ExtentReports  extent;
	
	
	public static void main(String[] args)  {
		ExtentManager.getInstanceHtmlReporter();
	}
	
	//Method
	public static ExtentSparkReporter getInstanceHtmlReporter()  {
		
		try {
			if(sparkFail == null && sparkAll == null) {
				//Will  create the report name by the date stamp - will use the Data class
				Date d = new Date();
				String filename  = d.toString().replace(" ", "_").replace(":", "_");
				//System.out.println(filename);
				//report = new ExtentSparkReporter("C:\\Users\\lenovo\\Desktop\\Workspace_Nat_Guna_APR20\\FitbitFramework\\ExtentReport\\"+filename+".html");
				sparkFail = new ExtentSparkReporter("C:\\Users\\lenovo\\Desktop\\Workspace_Nat_Guna_APR20\\FitbitFramework\\ExtentReport\\"+filename+"SparkFail.html");
				sparkFail.filter().statusFilter().as(new Status[] { Status.FAIL });

				sparkAll = new ExtentSparkReporter("C:\\Users\\lenovo\\Desktop\\Workspace_Nat_Guna_APR20\\FitbitFramework\\ExtentReport\\"+filename+"SparkAll.html");
				
				//Loading the configuration which is in XML file
				sparkAll.loadXMLConfig("C:\\Users\\lenovo\\Desktop\\Workspace_Nat_Guna_APR20\\FitbitFramework\\src\\com\\fitbit\\utilities\\Report-config.xml");
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		
		
		return report;
	}
	
	public static ExtentReports getInstanceReporter() {
		if(extent == null) {
			extent = new ExtentReports();
			extent.attachReporter(sparkFail, sparkAll);
			//Assign the system information
			extent.setSystemInfo("OS", "Windows 8.1");
			extent.setSystemInfo("Testing Env", "Fitbit Functional");
			extent.setSystemInfo("User", "Acer");
			extent.setSystemInfo("Author", "Kaushik");
			
		}
		
		return extent;
	}
	
	
	
}
